import {
  Update,
  Ctx,
  Start,
  Help,
  On,
  Hears,
  Sender,
  Message,
  Command,
} from 'nestjs-telegraf';
import { Markup, Scenes } from 'telegraf';

type Context = Scenes.SceneContext;

let currentChar = 'üòé';

const MENU_MAP = 'üåè –ö–∞—Ä—Ç–∞';
const MENU_MAP_CONTINUE = 'üõµ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ';
const MENU_CHARACTER = ' –ü–µ—Ä—Å–æ–Ω–∞–∂';
const getMenuCharacter = () => `${currentChar}${MENU_CHARACTER}`;
const MENU_TASKS = 'üì¢ –ó–∞–¥–∞–Ω–∏—è';
const MENU_THANKS = '‚≠êÔ∏è –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å';
const CHARS = ['ü§µ‚Äç‚ôÇÔ∏è', 'üßë‚ÄçüöÄ', 'üßô', 'üßù‚Äç‚ôÄÔ∏è', 'üßü‚Äç‚ôÄÔ∏è', 'üßõ'];

const getMainMenu = (additionalMenu: string[] = []) =>
  Markup.keyboard([
    additionalMenu,
    [MENU_MAP, getMenuCharacter(), MENU_TASKS],
    [MENU_THANKS],
  ]);
// .oneTime()
// .resize();

@Update()
export class AppUpdate {
  @Start()
  async start(@Ctx() ctx: Context) {
    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —è —Ç—É—Ç –Ω–∞–∫–æ–≤—ã—Ä—è–ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
      getMainMenu(),
    );
  }

  @Help()
  async help(@Ctx() ctx: Context) {
    await ctx.reply('–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–≤–µ—Ç –∏–ª–∏ —á—Ç–æ –µ—â–µ');
  }

  // MENU
  @Hears(MENU_MAP)
  async menuMap(@Ctx() ctx: Context) {
    await ctx.replyWithPhoto(
      {
        url: 'https://images.noob-club.ru/news/2020/03/615/56xo834zvg.jpg',
        filename: '–∫–∞—Ä—Ç–∞_–º–∏—Ä–∞.jpg',
      },
      getMainMenu([MENU_MAP_CONTINUE]),
    );
  }

  @Hears(MENU_MAP_CONTINUE)
  async menuMapContinue(@Ctx() ctx: Context) {
    await ctx.reply(
      `–ü–æ–µ—Ö–∞–ª –±—ã –¥–∞–ª—å—à–µ, –Ω–æ –¥–æ—Ä–æ–≥–∏ –ø–æ–∫–∞ –∑–∞–º–µ–ª–æ ‚òÉÔ∏è`,
      getMainMenu(),
    );
  }

  @Hears(new RegExp(`.+${MENU_CHARACTER}`))
  async menuCharacter(@Ctx() ctx: Context) {
    await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`, getMainMenu(CHARS));
  }
  @Hears(CHARS)
  async menuSetCurrentCharacter(
    @Ctx() ctx: Context,
    @Message('text') newChar: string,
  ) {
    currentChar = newChar;
    await ctx.reply(`–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω`, getMainMenu());
  }

  @Hears(MENU_TASKS)
  async menuTasks(@Ctx() ctx: Context) {
    await ctx.reply(`–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è`, getMainMenu());
  }

  @Hears(MENU_THANKS)
  async menuThanks(@Ctx() ctx: Context) {
    await ctx.reply(`–û–π, —Å–ø–∞—Å–∏–±–æ, —Ç—ã —Ç–∞–∫–æ–π –∫–ª–∞—Å—Å–Ω—ã–π!`, getMainMenu());
  }

  @On('sticker')
  async on(@Ctx() ctx: Context) {
    await ctx.reply('üëç');
  }

  @Hears(['hi', /.—Ä–∏–≤–µ—Ç.*/])
  async hears(
    @Ctx() ctx: Context,
    @Sender('first_name') first_name: string,
    @Message('text') message: string,
  ) {
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${first_name}!
–í–æ—Ç —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å: ${message}
–ò —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ`,
      getMainMenu(),
    );
  }

  @Command('photo')
  async show(@Ctx() ctx: Context) {
    await ctx.replyWithPhoto(
      {
        url: 'https://picsum.photos/200/300/?random',
        filename: 'kitten.jpg',
      },
      getMainMenu(),
    );
  }

  @Hears(/.*/)
  async anyHears(
    @Ctx() ctx: Context,
    @Sender('first_name') first_name: string,
  ) {
    await ctx.reply(
      `–°–ª—É—à–∞–π, ${first_name}, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ. –î–∞–≤–∞–π –ª—É—á—à–µ —Ñ–æ—Ç–∫—É —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é. /photo - –∫–ª–∏–∫–∞–π!`,
      getMainMenu(),
    );
  }
}
